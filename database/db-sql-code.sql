CREATE TYPE public.account_type AS ENUM
    ('Employee', 'Admin', 'Client');

ALTER TYPE public.account_type
    OWNER TO cse340;

-- Table structure for table `classification`
CREATE TABLE public.classification (
classification_id INT GENERATED BY DEFAULT AS IDENTITY,
classification_name CHARACTER VARYING NOT NULL,
CONSTRAINT classification_pk PRIMARY KEY (classification_id)
);

-- Table structure for table `inventory`
CREATE TABLE IF NOT EXISTS public.inventory (
	inv_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	inv_make character varying NOT NULL,
	inv_model character varying NOT NULL,
	inv_year character(4) NOT NULL,
	inv_description text NOT NULL,
	inv_image character varying NOT NULL,
	inv_thumbnail character varying NOT NULL,
	inv_price numeric(9, 0) NOT NULL,
	inv_miles integer NOT NULL,
	inv_color character varying NOT NULL,
	classification_id integer NOT NULL,
	CONSTRAINT intventory_pkey PRIMARY KEY (inv_id)
);

-- Create relationship between `classification` and `inventory` tables
ALTER TABLE IF EXISTS public.inventory
	ADD CONSTRAINT fk_classification FOREIGN KEY (classification_id)
	REFERENCES public.classification (classification_id) MATCH SIMPLE
	ON UPDATE CASCADE
	ON DELETE NO ACTION;

-- Table structure for table `account`
CREATE TABLE IF NOT EXISTS public.account (
    account_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    account_firstname character varying NOT NULL,
    account_lastname character varying NOT NULL,
    account_email character varying NOT NULL,
    account_password character varying NOT NULL,
    account_type account_type NOT NULL DEFAULT 'Client'::account_type,
    CONSTRAINT account_pkey PRIMARY KEY (account_id)
);

-- Data for table `classification`
INSERT INTO public.classification (classification_name)
VALUES ('Custom'),
	('Sport'),
	('SUV'),
	('Truck'),
	('Sedan');

--update img & thumbnail URL
UPDATE public.inventory 
SET
inv_image = REPLACE(inv_image,'images/','images/vehicles/'),
inv_thumbnail = REPLACE(inv_thumbnail,'images/','images/vehicles/');

--add comment table
-- Table: public.comments

-- DROP TABLE IF EXISTS public.comments;

CREATE TABLE IF NOT EXISTS public.comments
(
    comment_body text COLLATE pg_catalog."default" NOT NULL,
    comment_id integer NOT NULL,
    commenter character varying COLLATE pg_catalog."default" NOT NULL,
    commenter_id integer NOT NULL,
    CONSTRAINT comment_pkey PRIMARY KEY (comment_id),
    CONSTRAINT fk_account_id FOREIGN KEY (commenter_id)
        REFERENCES public.account (account_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.comments
    OWNER to cse340brenn;

	 ALTER TABLE IF EXISTS public.comments
    ADD COLUMN comment_date date NOT NULL;

	 -- Table: public.comments

-- DROP TABLE IF EXISTS public.comments;

CREATE TABLE IF NOT EXISTS public.comments
(
    comment_body text COLLATE pg_catalog."default" NOT NULL,
    comment_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    commenter character varying COLLATE pg_catalog."default" NOT NULL,
    commenter_id integer NOT NULL,
    comment_date date NOT NULL,
    inv_id integer NOT NULL,
    CONSTRAINT comment_pkey PRIMARY KEY (comment_id),
    CONSTRAINT fk_account_id FOREIGN KEY (commenter_id)
        REFERENCES public.account (account_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT fk_inv_id FOREIGN KEY (inv_id)
        REFERENCES public.inventory (inv_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE
        NOT VALID
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.comments
    OWNER to cse340brenn;